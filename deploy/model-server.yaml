---
AWSTemplateFormatVersion: "2010-09-09"

Description: "The training and deployment pipeline for a Machine Learning model API"

Parameters:
  ProductName:
    Description: Project name (also used as a tag for cost-tracking purposes)
    Type: String
  ServiceName:
    Description: Service name (also used as a tag for cost-tracking purposes)
    Type: String
  EnvironmentName:
    Description: Environment name (also used as a tag for cost-tracking purposes)
    Type: String

# Mappings:
#   set of mappings

# Conditions:
#   set of conditions

Resources:
  DataSourceBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Join
        - '-'
        - - !Ref ServiceName
          - !Ref EnvironmentName
          - !Ref "AWS::Region"
          - !Ref "AWS::AccountId"
      LifecycleConfiguration:
        Rules: 
          - NoncurrentVersionExpirationInDays: 90
            Status: "Enabled"
      Tags: 
        - 
          Key: "product"
          Value: !Ref ProductName
        - 
          Key: "service"
          Value: !Ref ServiceName
        - 
          Key: "stage"
          Value: !Ref EnvironmentName
      VersioningConfiguration: 
        Status: "Enabled"
  # NewSourceDataEvent:
  #   Type: AWS::Events::Rule
  #   Properties: 
  #     Description: "An event signifying that new data has been uploaded to the training data bucket"
  #     EventPattern: Json
  #     Name: String
  #     RoleArn: String
  #     ScheduleExpression: String
  #     State: String
  #     Targets: 
  #       - Target
  EcrRepository:
    Type: AWS::ECR::Repository
    Properties: 
      LifecyclePolicy: 
        LifecyclePolicyText: |
          {
            "rules": [
            {
              "rulePriority": 1,
              "description": "Only keep a set number of images",
              "selection": {
                "tagStatus": "any",
                "countType": "imageCountMoreThan",
                "countNumber": 10
              },
              "action": { "type": "expire" }
            }]
          }
      RepositoryName: !Join
        - '-'
        - - !Ref ProductName
          - !Ref ServiceName
          - !Ref EnvironmentName
      Tags: 
        - 
          Key: "product"
          Value: !Ref ProductName
        - 
          Key: "service"
          Value: !Ref ServiceName
        - 
          Key: "stage"
          Value: !Ref EnvironmentName
  InitiateStepFunctionsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - '-'
        - - !Ref ProductName
          - !Ref ServiceName
          - !Ref EnvironmentName
          - "initiate-step-functions"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
      Path: /
  InitiateStepFunctionsLambda:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: |
          import json
          def lambda_handler(event, context):
              print("Event: {}".format(json.dumps(event)))
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Lambda!')
              }
      Description: "Lambda that initiates the Step Functions portion of the deployment pipeline"
      # Environment: 
      #   Environment
      FunctionName: !Join
        - '-'
        - - !Ref ProductName
          - !Ref ServiceName
          - !Ref EnvironmentName
          - "start-step-functions"
      Handler: index.lambda_handler
      Role: 
        Fn::GetAtt:
          - InitiateStepFunctionsLambdaRole
          - Arn
      Runtime: "python3.7"
      Tags: 
        - 
          Key: "product"
          Value: !Ref ProductName
        - 
          Key: "service"
          Value: !Ref ServiceName
        - 
          Key: "stage"
          Value: !Ref EnvironmentName
# Outputs:
#   set of outputs