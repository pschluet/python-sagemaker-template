---
AWSTemplateFormatVersion: "2010-09-09"

Description: "The training and deployment pipeline for a Machine Learning model API"

Parameters:
  ProductName:
    Description: Project name (also used as a tag for cost-tracking purposes)
    Type: String
  ServiceName:
    Description: Service name (also used as a tag for cost-tracking purposes)
    Type: String
  EnvironmentName:
    Description: Environment name (also used as a tag for cost-tracking purposes)
    Type: String

# Mappings:
#   set of mappings

# Conditions:
#   set of conditions

Resources:
  DataSourceBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Join
        - '-'
        - - !Ref ServiceName
          - !Ref EnvironmentName
          - !Ref "AWS::Region"
          - !Ref "AWS::AccountId"
      LifecycleConfiguration:
        Rules: 
          - NoncurrentVersionExpirationInDays: 90
            Status: "Enabled"
      Tags: 
        - 
          Key: "product"
          Value: !Ref ProductName
        - 
          Key: "service"
          Value: !Ref ServiceName
        - 
          Key: "stage"
          Value: !Ref EnvironmentName
      VersioningConfiguration: 
        Status: "Enabled"
  CloudTrailLoggingBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Join
        - '-'
        - - !Ref ServiceName
          - !Ref EnvironmentName
          - !Ref "AWS::Region"
          - !Ref "AWS::AccountId"
          - "cloudtrail-logs"
      Tags: 
        - 
          Key: "product"
          Value: !Ref ProductName
        - 
          Key: "service"
          Value: !Ref ServiceName
        - 
          Key: "stage"
          Value: !Ref EnvironmentName
  CloudtrailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: CloudTrailLoggingBucket
    Properties: 
      Bucket: !Ref CloudTrailLoggingBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AWSCloudTrailAclCheck20150319
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !GetAtt CloudTrailLoggingBucket.Arn
          - Sid: AWSCloudTrailWrite20150319
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource: !Join
              - '/'
              - - !GetAtt CloudTrailLoggingBucket.Arn
                - !Ref ServiceName
                - AWSLogs
                - !Ref "AWS::AccountId"
                - "*"
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
  PullRequestEcrRepository:
    Type: AWS::ECR::Repository
    Properties: 
      LifecyclePolicy: 
        LifecyclePolicyText: |
          {
            "rules": [
            {
              "rulePriority": 1,
              "description": "Only keep a set number of images",
              "selection": {
                "tagStatus": "any",
                "countType": "imageCountMoreThan",
                "countNumber": 10
              },
              "action": { "type": "expire" }
            }]
          }
      RepositoryName: !Join
        - '-'
        - - !Ref ProductName
          - !Ref ServiceName
          - "pull-request"
      Tags: 
        - 
          Key: "product"
          Value: !Ref ProductName
        - 
          Key: "service"
          Value: !Ref ServiceName
        - 
          Key: "stage"
          Value: !Ref EnvironmentName
  DevelopEcrRepository:
    Type: AWS::ECR::Repository
    Properties: 
      LifecyclePolicy: 
        LifecyclePolicyText: |
          {
            "rules": [
            {
              "rulePriority": 1,
              "description": "Only keep a set number of images",
              "selection": {
                "tagStatus": "any",
                "countType": "imageCountMoreThan",
                "countNumber": 10
              },
              "action": { "type": "expire" }
            }]
          }
      RepositoryName: !Join
        - '-'
        - - !Ref ProductName
          - !Ref ServiceName
          - "develop"
      Tags: 
        - 
          Key: "product"
          Value: !Ref ProductName
        - 
          Key: "service"
          Value: !Ref ServiceName
        - 
          Key: "stage"
          Value: !Ref EnvironmentName
  MasterEcrRepository:
    Type: AWS::ECR::Repository
    Properties: 
      LifecyclePolicy: 
        LifecyclePolicyText: |
          {
            "rules": [
            {
              "rulePriority": 1,
              "description": "Only keep a set number of images",
              "selection": {
                "tagStatus": "any",
                "countType": "imageCountMoreThan",
                "countNumber": 10
              },
              "action": { "type": "expire" }
            }]
          }
      RepositoryName: !Join
        - '-'
        - - !Ref ProductName
          - !Ref ServiceName
          - "master"
      Tags: 
        - 
          Key: "product"
          Value: !Ref ProductName
        - 
          Key: "service"
          Value: !Ref ServiceName
        - 
          Key: "stage"
          Value: !Ref EnvironmentName
  InitiateStepFunctionsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - '-'
        - - !Ref ProductName
          - !Ref ServiceName
          - !Ref EnvironmentName
          - "initiate-step-functions"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
      Path: /
  InitiateStepFunctionsLambda:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: |
          import json
          def lambda_handler(event, context):
              print("Event: {}".format(json.dumps(event)))
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Lambda!')
              }
      Description: "Lambda that initiates the Step Functions portion of the deployment pipeline"
      # Environment: 
      #   Environment
      FunctionName: !Join
        - '-'
        - - !Ref ProductName
          - !Ref ServiceName
          - !Ref EnvironmentName
          - "start-step-functions"
      Handler: index.lambda_handler
      Role: 
        Fn::GetAtt:
          - InitiateStepFunctionsLambdaRole
          - Arn
      Runtime: "python3.7"
      Tags: 
        - 
          Key: "product"
          Value: !Ref ProductName
        - 
          Key: "service"
          Value: !Ref ServiceName
        - 
          Key: "stage"
          Value: !Ref EnvironmentName
  NewSourceDataTrail:
    Type: AWS::CloudTrail::Trail
    DependsOn: 
      - CloudtrailBucketPolicy
      - CloudTrailLoggingBucket
    Properties: 
      EventSelectors: 
        - DataResources: 
          - Type: AWS::S3::Object
            Values:
              - !Join
                - ""
                - - !GetAtt DataSourceBucket.Arn
                  - "/"
      IsLogging: true
      S3BucketName: !Ref CloudTrailLoggingBucket
      S3KeyPrefix: !Ref ServiceName
      Tags: 
        - 
          Key: "product"
          Value: !Ref ProductName
        - 
          Key: "service"
          Value: !Ref ServiceName
        - 
          Key: "stage"
          Value: !Ref EnvironmentName
  NewSourceDataEvent:
    Type: AWS::Events::Rule
    Properties: 
      Description: "An event signifying that new data has been uploaded to the training data bucket"
      EventPattern: !Sub
        - |
          {
            "source": [
              "aws.s3"
            ],
            "detail-type": [
              "AWS API Call via CloudTrail"
            ],
            "detail": {
              "eventSource": [
                "s3.amazonaws.com"
              ],
              "eventName": [
                "PutObject"
              ],
              "requestParameters": {
                "bucketName": [
                  "${SourceBucketName}"
                ]
              }
            }
          }
        - { SourceBucketName: !Ref DataSourceBucket }
      Name: !Join
        - '-'
        - - !Ref ProductName
          - !Ref ServiceName
          - !Ref EnvironmentName
          - "new-source-data"
      State: ENABLED
      Targets: 
        - Arn: !GetAtt InitiateStepFunctionsLambda.Arn
          Id: "step-function-launcher"
  NewEcrImageEvent:
    Type: AWS::Events::Rule
    Properties: 
      Description: "An event signifying that a new docker image has been pushed to ECR"
      EventPattern: !Sub |
          {
            "source": [
              "aws.ecr"
            ],
            "detail": {
              "eventName": [
                "PutImage"
              ],
              "requestParameters": {
                "repositoryName": [
                  "${PullRequestEcrRepository}",
                  "${DevelopEcrRepository}",
                  "${MasterEcrRepository}"
                ]
              }
            }
          }
      Name: !Join
        - '-'
        - - !Ref ProductName
          - !Ref ServiceName
          - !Ref EnvironmentName
          - "new-docker-image"
      State: ENABLED
      Targets: 
        - Arn: !GetAtt InitiateStepFunctionsLambda.Arn
          Id: "step-function-launcher"
  PermissionForNewSourceDataEventToInvokeInitiateStepFunctionsLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref InitiateStepFunctionsLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt NewSourceDataEvent.Arn
  PermissionForNewEcrImageEventToInvokeInitiateStepFunctionsLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref InitiateStepFunctionsLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt NewEcrImageEvent.Arn
# Outputs:
#   set of outputs