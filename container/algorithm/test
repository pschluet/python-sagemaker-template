#!/usr/bin/env python

from predictor import app
import unittest
import subprocess
import requests
import time
from train import train
import os

class TestPredictor(unittest.TestCase):
    def setUp(self):
        # Create a test client
        self.app = app.test_client()
        # Propagate the exceptions to the test client
        self.app.testing = True

    def test_ping(self):
        response = self.app.get('/ping')
        self.assertEqual(response.status_code, 200)

    def test_invocations(self):
        with open('/opt/program/test_payload.csv', 'rb') as f:
            payload = f.read()
        response = self.app.post(
            '/invocations',
            data=payload,
            headers={'Content-Type': 'text/csv'}
        )
        self.assertEqual(response.data.decode('utf-8'), 'setosa\nsetosa\nsetosa\nsetosa\nsetosa\nsetosa\nsetosa\nsetosa\nsetosa\nsetosa\nversicolor\nversicolor\nversicolor\nversicolor\nversicolor\nversicolor\nversicolor\nversicolor\nversicolor\nversicolor\nvirginica\nvirginica\nvirginica\nvirginica\nvirginica\nvirginica\nvirginica\nvirginica\nvirginica\n')


class TestTraining(unittest.TestCase):
    def test_train(self):
        # Clear the model file if it exists
        model_path = '/opt/ml/model/model.joblib'
        if os.path.exists(model_path): os.remove(model_path)

        # Train the model
        train()

        # Make sure we created a new model file
        self.assertTrue(os.path.exists(model_path))


if __name__ == '__main__':
    unittest.main()